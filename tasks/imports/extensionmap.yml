---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- name: create temporary extract directory
  file:
    path: /tmp/__load_{{ __ibm_infosvr_impexp_type }}_{{ outer_item.from | basename }}_tmp
    state: directory

- name: extract extension mapping document archive
  unarchive:
    src: /tmp/__load_{{ __ibm_infosvr_impexp_type }}_{{ outer_item.from | basename }}
    dest: /tmp/__load_{{ __ibm_infosvr_impexp_type }}_{{ outer_item.from | basename }}_tmp
    remote_src: yes

- name: get listing of extracted files
  find:
    paths: /tmp/__load_{{ __ibm_infosvr_impexp_type }}_{{ outer_item.from | basename }}_tmp
    patterns: "*.csv"
    recurse: yes
  register: __ibm_infosvr_impexp_xm

- name: load extension mapping documents
  shell: "source ~/.bashrc && \
          source dsenv && \
          {{ ibm_infosvr_impexp_infosvr_install_location }}/Clients/istools/cli/istool.sh \
          workbench extension mapping import \
          -u {{ ibm_infosvr_impexp_infosvr_admin_user }} \
          -p {{ ibm_infosvr_impexp_infosvr_admin_user_pwd }} \
          -dom {{ ibm_infosvr_impexp_services_host | lower }}:{{ ibm_infosvr_impexp_services_console_port }} \
          {% if outer_item.with_options is defined \
          and outer_item.with_options.overwrite is defined \
          and outer_item.with_options.overwrite %}\
          -ov \
          {% endif %}\
          {% if (item.path | replace('/tmp/__load_' + __ibm_infosvr_impexp_type + '_' + \
          (outer_item.from | basename) + '_tmp/','')).find('/') != -1 %}\
          {% if outer_item.with_options is defined and outer_item.with_options.folder is defined %}\
          -folder '{{ outer_item.with_options.folder }}\
          /{{ (item.path | replace("/tmp/__load_" + __ibm_infosvr_impexp_type + "_" + (outer_item.from | basename) + \
          "_tmp/", "") | dirname) }}' \
          {% else %}\
          -folder 'root/{{ (item.path | replace("/tmp/__load_" + __ibm_infosvr_impexp_type + "_" + \
          (outer_item.from | basename) + "_tmp/", "") | dirname) }}' \
          {% endif %}\
          {% elif outer_item.with_options is defined and outer_item.with_options.folder is defined %}\
          -folder '{{ outer_item.with_options.folder }}' \
          {% endif %}\
          -f {{ item.path }} \
          -o /tmp/__load_{{ __ibm_infosvr_impexp_type }}.log \
          {% if outer_item.with_options is defined %}{{ outer_item.with_options.args | default("") }}{% endif %}"
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_impexp_infosvr_install_location }}/Server/DSEngine"
  with_items: "{{ __ibm_infosvr_impexp_xm.files }}"
  when: outer_item is defined
  loop_control:
    label: "{{ outer_item.from }} - {{ item.path }}"

- name: remove temporary extract directory
  file:
    path: /tmp/__load_{{ __ibm_infosvr_impexp_type }}_{{ outer_item.from | basename }}_tmp
    state: absent
