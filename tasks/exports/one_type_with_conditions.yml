---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- name: "{{ __ibm_infosvr_impexp_type }} - get changed assets"
  igc_get_changed_assets:
    host: "{{ ibm_infosvr_impexp_services_host }}"
    port: "{{ ibm_infosvr_impexp_services_console_port }}"
    user: "{{ ibm_infosvr_impexp_infosvr_admin_user }}"
    password: "{{ ibm_infosvr_impexp_infosvr_admin_user_pwd }}"
    asset_type: "{{ __ibm_infosvr_impexp_type }}"
    from_time: >
              {% if item.limited_to is defined and item.limited_to.changes_in_last_hours is defined %}
              {{ (__ibm_infosvr_impexp_to_epoch|int) - ((item.limited_to.changes_in_last_hours|int) * 3600 * 1000) }}
              {% else %}
              -1
              {% endif %}
    to_time: >
              {{ __ibm_infosvr_impexp_to_epoch | int }}
    conditions: "{% if item.limited_to is defined %}\
                {{ item.limited_to.only_with_conditions | default(omit) }}\
                {% else %}\
                []\
                {% endif %}"
    cert: "{{ __ibm_infosvr_impexp_ssl_cert_location | default(omit) }}"
  register: __ibm_infosvr_impexp_one_type_conditions_changes
  with_items: "{{ __ibm_infosvr_impexp_items }}"
  loop_control:
    label: "{{ item.into | basename }}"

- debug:
    var: __ibm_infosvr_impexp_one_type_conditions_changes
    verbosity: 1

- name: check if ISX-based extract
  include_tasks: simple_switch.yml
  when: __ibm_infosvr_impexp_switch is defined

- name: check if CSV-based extract
  include_tasks: extensionmap.yml
  with_items: "{{ __ibm_infosvr_impexp_one_type_conditions_changes.results }}"
  loop_control:
    loop_var: outer_item
  when: __ibm_infosvr_impexp_type == 'extension_mapping_document'

- name: "{{ __ibm_infosvr_impexp_type }} - transfer files"
  fetch: src=/tmp/__export_{{ __ibm_infosvr_impexp_type }}_{{ item.into | basename }} dest={{ item.into }} flat=yes
  with_items: "{{ __ibm_infosvr_impexp_items }}"
  loop_control:
    label: "{{ item.into | basename }}"

- name: "{{ __ibm_infosvr_impexp_type }} - cleanup exported files"
  file: path=/tmp/__export_{{ __ibm_infosvr_impexp_type }}_{{ item.into | basename }} state=absent
  with_items: "{{ __ibm_infosvr_impexp_items }}"
  loop_control:
    label: "{{ item.into | basename }}"
